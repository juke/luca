---
---

<div id="retro-background" class="fixed inset-0 w-screen h-screen overflow-hidden">
    <div class="animated-bg"></div>
    <canvas id="three-canvas" class="fixed inset-0 w-screen h-screen"></canvas>
</div>

<script>
import * as THREE from 'three';

// Wait for DOM to be ready
document.addEventListener('DOMContentLoaded', () => {
    // Create and mount the renderer to the canvas
    const canvas = document.getElementById('three-canvas');
    if (!canvas) throw new Error('Canvas not found');

    const renderer = new THREE.WebGLRenderer({ 
        canvas: canvas as HTMLCanvasElement,
        antialias: false, 
        alpha: true
    });

    const scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2(0x1a1a2e, 0.008);

    const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 25, 40);
    camera.lookAt(0, 0, 0);

    // Lights
    const ambientLight = new THREE.AmbientLight(0x312e81, 1.0);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xff00ff, 1.0);
    pointLight.position.set(0, 30, 0);
    scene.add(pointLight);

    // Grid
    const gridHelper = new THREE.GridHelper(400, 150, 0xff00ff, 0x00ffff);
    gridHelper.position.y = -20;
    scene.add(gridHelper);

    // Particles
    const particlesGeometry = new THREE.BufferGeometry();
    const particlesCount = 8000;
    const posArray = new Float32Array(particlesCount * 3);

    for(let i = 0; i < particlesCount * 3; i += 3) {
        posArray[i] = (Math.random() - 0.5) * 200;      // X: spread wider
        posArray[i + 1] = (Math.random() - 0.5) * 100;  // Y: less vertical spread
        posArray[i + 2] = (Math.random() - 0.5) * 200;  // Z: spread wider
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
    const particlesMaterial = new THREE.PointsMaterial({
        size: 0.1,  // Slightly larger particles
        color: 0xff00ff,
        transparent: true,
        opacity: 0.4  // Slightly more transparent
    });

    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particlesMesh);

    // Animation variables
    let time = 0;
    let cameraRadius = 40; // Declare this before updateSize
    const cameraSpeed = 0.0002;

    // Handle resize
    const updateSize = () => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        
        renderer.setSize(width, height);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

        // Mobile adjustments
        if (width < 768) {
            camera.position.y = 15;  // Higher camera height
            camera.position.z = 20;  // Closer to scene
            gridHelper.scale.set(1.2, 1.2, 1.2);  // Larger grid for closer view
            particlesMesh.scale.set(1.0, 1.0, 1.0);  // Larger particles field
            cameraRadius = 20;  // Tighter orbit radius for mobile
            scene.fog = new THREE.FogExp2(0x1a1a2e, 0.012); // Adjusted fog density for mobile
        } else {
            camera.position.y = 25;
            camera.position.z = 40;
            gridHelper.scale.set(1.8, 1.8, 1.8);
            particlesMesh.scale.set(1.4, 1.4, 1.4);
            cameraRadius = 40;  // Original orbit radius for desktop
            scene.fog = new THREE.FogExp2(0x1a1a2e, 0.008); // Original fog density
        }
    };

    window.addEventListener('resize', updateSize);
    updateSize();

    function animate() {
        requestAnimationFrame(animate);
        
        time += 0.0008;

        // Rotate camera around the scene using the dynamic cameraRadius
        camera.position.x = Math.sin(time) * cameraRadius;
        camera.position.z = Math.cos(time) * cameraRadius;
        camera.position.y = camera.position.y; // Use current height from resize handler
        camera.lookAt(0, 0, 0);

        // Animate elements
        const timeBasedY = Math.sin(time) * 3;
        gridHelper.position.y = -20 + timeBasedY;
        
        particlesMesh.rotation.y = time * 0.08;
        particlesMesh.rotation.x = time * 0.04;
        
        pointLight.position.x = Math.sin(time) * 30;
        pointLight.position.z = Math.cos(time) * 30;

        renderer.render(scene, camera);
    }

    animate();
});
</script>

<style>
#retro-background {
    pointer-events: none;
    position: fixed;
    inset: 0;
    z-index: 0;
}

.animated-bg {
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, #0a0a1a, #1a1a2e, #312e81);
    background-size: 400% 400%;
    animation: gradientBG 15s ease infinite;
    opacity: 0.3;
    z-index: 0;
}

#three-canvas {
    opacity: 0.6;
    z-index: 1;
}

@keyframes gradientBG {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}
</style>
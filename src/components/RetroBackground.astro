---
---

<div id="retro-background" class="fixed inset-0 w-screen h-screen overflow-hidden z-0"></div>

<script>
import * as THREE from 'three';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });

// Create grid
const size = 200;
const divisions = 100;
const gridHelper = new THREE.GridHelper(size, divisions, 0xff00ff, 0x00ffff);
gridHelper.position.y = -10;
scene.add(gridHelper);

// Add particles
const particlesGeometry = new THREE.BufferGeometry();
const particlesCount = 3000;
const posArray = new Float32Array(particlesCount * 3);

for(let i = 0; i < particlesCount * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 100;
}

particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
const particlesMaterial = new THREE.PointsMaterial({
    size: 0.05,
    color: 0xff00ff,
    transparent: true,
    opacity: 0.5
});

const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
scene.add(particlesMesh);

// Setup
const updateSize = () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    const isMobile = width < 768;

    renderer.setSize(width, height);
    renderer.setPixelRatio(1); // Force pixelated look

    // Adjust camera and scene for mobile
    if (isMobile) {
        camera.position.z = 40;
        camera.position.y = 15;
        gridHelper.scale.set(0.8, 0.8, 0.8);
        particlesMesh.scale.set(0.8, 0.8, 0.8);
    } else {
        camera.position.z = 50;
        camera.position.y = 20;
        gridHelper.scale.set(1.5, 1.5, 1.5);
        particlesMesh.scale.set(1.2, 1.2, 1.2);
    }
};

updateSize();
document.getElementById('retro-background').appendChild(renderer.domElement);

// Position camera
camera.position.z = 30;
camera.position.y = 10;
camera.rotation.x = -0.3;

// Animation
let time = 0;
let scrollY = 0;
let lastScrollTime = 0;
let ticking = false;

window.addEventListener('scroll', () => {
    scrollY = window.scrollY;
    if (!ticking) {
        requestAnimationFrame(() => {
            ticking = false;
        });
        ticking = true;
    }
});

let lastRenderTime = 0;
const targetFPS = 60;
const frameInterval = 1000 / targetFPS;

function animate(currentTime) {
    requestAnimationFrame(animate);

    // Throttle render rate
    const deltaTime = currentTime - lastRenderTime;
    if (deltaTime < frameInterval) return;

    lastRenderTime = currentTime - (deltaTime % frameInterval);
    time += 0.001;

    // Cache transform values
    const timeBasedY = Math.sin(time) * 2;
    const timeBasedRotation = time * 0.1;
    const normalizedScroll = (scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 2 - 1;
    const scrollBasedX = normalizedScroll * 10;
    
    // Batch geometry updates
    gridHelper.position.y = timeBasedY;
    gridHelper.rotation.y = normalizedScroll * 0.2;
    
    particlesMesh.rotation.y = timeBasedRotation;
    particlesMesh.position.x = -scrollBasedX * 0.5;
    
    camera.position.x = scrollBasedX;
    camera.lookAt(scene.position);
    
    // Render scene
    renderer.render(scene, camera);
}

// Remove mouse movement tracking
let mouseX = 0;
window.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX - window.innerWidth / 2) * 0.05;
});

// Handle resize
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    updateSize();
});

animate();
</script>

<style>
#retro-background {
    pointer-events: none;
    opacity: 0.3;
}

canvas {
    image-rendering: pixelated;
    width: 100vw !important;
    height: 100vh !important;
    position: fixed;
    top: 0;
    left: 0;
}
</style>
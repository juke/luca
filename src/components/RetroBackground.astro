---
---

<div id="retro-background" class="absolute inset-0 z-0"></div>

<script>
import * as THREE from 'three';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true });

// Setup
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(1); // Force pixelated look
document.getElementById('retro-background').appendChild(renderer.domElement);

// Create grid
const size = 100;
const divisions = 50;
const gridHelper = new THREE.GridHelper(size, divisions, 0xff00ff, 0x00ffff);
scene.add(gridHelper);

// Add particles
const particlesGeometry = new THREE.BufferGeometry();
const particlesCount = 2000;
const posArray = new Float32Array(particlesCount * 3);

for(let i = 0; i < particlesCount * 3; i++) {
    posArray[i] = (Math.random() - 0.5) * 50;
}

particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
const particlesMaterial = new THREE.PointsMaterial({
    size: 0.05,
    color: 0xff00ff,
    transparent: true,
    opacity: 0.5
});

const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
scene.add(particlesMesh);

// Position camera
camera.position.z = 30;
camera.position.y = 10;
camera.rotation.x = -0.3;

// Animation
let time = 0;
function animate() {
    requestAnimationFrame(animate);
    
    time += 0.001;
    gridHelper.position.y = Math.sin(time) * 2;
    particlesMesh.rotation.y = time * 0.1;
    
    // Mouse movement effect
    if (window.mouseX) {
        camera.position.x += (window.mouseX - camera.position.x) * 0.05;
        camera.lookAt(scene.position);
    }
    
    renderer.render(scene, camera);
}

// Mouse movement tracking
let mouseX = 0;
window.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX - window.innerWidth / 2) * 0.05;
});

// Handle resize
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

animate();
</script>

<style>
#retro-background {
    pointer-events: none;
    opacity: 0.3;
}

canvas {
    image-rendering: pixelated;
}
</style>